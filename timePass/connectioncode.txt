import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class ConnectionProvider {
    private static Connection con;

    public static Connection getConnection() {
        try {
            if (con == null || con.isClosed()) { // Check if connection is null or closed
                Class.forName("com.mysql.cj.jdbc.Driver");

                String url = "jdbc:mysql://localhost:3306/itt";
                String username = "root";
                // String password = "shrey";
                String password = "ark@sql#323!";
                con = DriverManager.getConnection(url, username, password);
                if (con.isClosed()) {
                    System.out.println("Connection is Closed");
                } else {
                    System.out.println("Connection established");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return con;
    }
}



import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import java.util.*;
import java.awt.Color;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;

public class Login extends JFrame {
    private JFrame frame;
    private JButton loginButton;
    private JButton resetButton;
    private JTextField email;
    private JPasswordField password;
    private JLabel usernameError;
    private JLabel passwordError;
    public String finalemailString;
    public String finalpassString;

    public Login() throws IOException, SQLException {
        Connection con = ConnectionProvider.getConnection();
        String sql = "SELECT password FROM user WHERE email = ?";
        PreparedStatement pstmt = con.prepareStatement(sql);

        frame = new JFrame("Login Form");
        email = new JTextField("Enter Email");
        password = new JPasswordField("Enter Password");
        loginButton = new JButton("LOGIN");
        usernameError = new JLabel();
        passwordError = new JLabel();
        resetButton = new JButton("Reset");

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1000, 800);

        JPanel backgroundPanel = new JPanel() {
            BufferedImage image = ImageIO.read(getClass().getResource("/images/bg2.jpg"));

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
            }
        };

        backgroundPanel.setLayout(new GridLayout(1, 2));

        email.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                validateEmail();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validateEmail();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                validateEmail();
            }

        });

        password.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                validatePasswordForBox(String.valueOf(password.getPassword()));
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validatePasswordForBox(String.valueOf(password.getPassword()));
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                validatePasswordForBox(String.valueOf(password.getPassword()));
            }

            private boolean validatePasswordForBox(String passwordText) {
                passwordText = passwordText.trim();
                if (passwordText.length() > 0 && !passwordText.equals("Enter your password")) {
                    if (passwordText.length() < 8) {
                        passwordError.setForeground(Color.RED);
                        passwordError.setText("Password must be of length 8");
                        return false;
                    } else if (!passwordText.matches(".*[a-zA-Z]+.*")) {
                        passwordError.setForeground(Color.RED);
                        passwordError.setText("Password must contain alphabets");
                        return false;
                    } else if (!passwordText.matches(".*\\d.*")) {
                        passwordError.setForeground(Color.RED);
                        passwordError.setText("Password must contain digits");
                        return false;
                    } else {
                        passwordError.setForeground(new Color(50, 168, 58));
                        finalpassString = passwordText;
                        passwordError.setText("Valid Password");
                        return true;
                    }
                } else {
                    passwordError.setText("");
                    return false;
                }
            }
        });

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String emailText = email.getText().trim();
                String passwordText = String.valueOf(password.getPassword()).trim();
                try {
                    pstmt.setString(1, emailText);
                    ResultSet result = pstmt.executeQuery();
                    if (result.next()) {
                        String passwordFromDB = result.getString("password");
                        if (passwordFromDB.equals(finalpassString)) {
                            System.out.println("Login successful!");
                        } else {
                            System.out.println("Incorrect password.");
                        }
                    } else {
                        System.out.println("No password found for the provided email.");
                    }
                    result.close();
                    pstmt.close();
                    con.close();
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
            }
        });

        resetButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                email.setText("Enter your email");
                password.setText("Enter your password");
                passwordError.setText("");
                usernameError.setText("");
            }
        });

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        topPanel.setBackground(Color.BLACK);
        topPanel.setBorder(BorderFactory.createEmptyBorder(200, 0, 0, 0));

        ImageIcon sideIcon = new ImageIcon("images/logo2.png");
        Image img = sideIcon.getImage();
        int logoWidth = 300;
        int logoHeight = 300;
        Image resizedImg = img.getScaledInstance(logoWidth, logoHeight, Image.SCALE_SMOOTH);
        ImageIcon resizedIcon = new ImageIcon(resizedImg);

        JLabel imageLabel = new JLabel(resizedIcon);
        topPanel.add(imageLabel);

        JPanel bottomPanel = new JPanel(new GridBagLayout());
        bottomPanel.setBackground(Color.WHITE);

        JLabel loginLabel = new JLabel("Login Here for FREE!");

        Insets textInsets = new Insets(10, 10, 5, 10);
        Insets errorInsets = new Insets(0, 20, 0, 0);

        GridBagConstraints input = new GridBagConstraints();

        Font font = new Font("Times New Roman", Font.BOLD, 16);
        loginLabel.setFont(font);

        input.anchor = GridBagConstraints.CENTER;
        input.insets = textInsets;
        input.gridy = 0;
        bottomPanel.add(loginLabel, input);

        input.anchor = GridBagConstraints.CENTER;
        input.insets = textInsets;
        input.gridy = 1;
        bottomPanel.add(email, input);
        email.setPreferredSize(new Dimension(230, 35));

        input.gridy = 2;
        input.insets = errorInsets;
        input.anchor = GridBagConstraints.WEST;
        bottomPanel.add(usernameError, input);

        input.gridy = 3;
        input.insets = textInsets;
        input.anchor = GridBagConstraints.CENTER;
        bottomPanel.add(password, input);
        password.setPreferredSize(new Dimension(230, 35));

        input.gridy = 4;
        input.insets = errorInsets;
        input.anchor = GridBagConstraints.WEST;
        bottomPanel.add(passwordError, input);

        input.insets = new Insets(20, 10, 10, 10);
        input.anchor = GridBagConstraints.WEST;
        input.gridx = 0;
        input.gridy = 5;
        bottomPanel.add(loginButton, input);
        loginButton.setPreferredSize(new Dimension(90, 35));

        input.insets = new Insets(20, -100, 10, 10);
        input.anchor = GridBagConstraints.WEST;
        input.gridx = 1;
        input.gridy = 5;
        bottomPanel.add(resetButton, input);
        resetButton.setPreferredSize(new Dimension(90, 35));

        backgroundPanel.add(topPanel);
        backgroundPanel.add(bottomPanel);

        frame.add(backgroundPanel);
        frame.setVisible(true);
    }

    private boolean validateMail(String mail) {
        String regExp = "^[a-zA-Z0-9_+&*-]+(?:\\." +
                "[a-zA-Z0-9_+&*-]+)*@" +
                "(?:[a-zA-Z0-9-]+\\.)+[a-z" +
                "A-Z]{2,7}$";
        Pattern pattern = Pattern.compile(regExp);
        return pattern.matcher(mail).matches();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                new Login();
            } catch (IOException | SQLException e) {
                e.printStackTrace();
            }
        });
    }
}

class ConnectionProvider {
    // Implement the getConnection() method to connect to your database
    public static Connection getConnection() throws SQLException {
        // Implement your database connection here
        return null;
    }
}
